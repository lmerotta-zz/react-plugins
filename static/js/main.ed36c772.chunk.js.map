{"version":3,"sources":["../../src/components/PluginStoreProvider.tsx","../../src/utils/store.ts","../../src/components/Plugins.tsx","../../src/hooks/usePlugins.tsx","components/Sidebar.tsx","components/Page.tsx","pluginStore.ts","modules/billing/components/BillingWidget.tsx","modules/billing/components/BillingSection.tsx","modules/admin/components/AdminWidget.tsx","modules/admin/components/AdminSection.tsx","App.tsx","index.tsx"],"names":["ProviderContext","React","PluginStoreProvider","children","store","contextValues","useMemo","value","PluginStore","sections","listeners","subscribe","this","current","registerPlugin","priority","pluginStore","section","component","name","listener","removePlugin","getPluginsForSection","a","b","Plugins","plugins","useContext","forceRender","useReducer","s","useEffect","unsub","Component","usePlugins","key","index","Sidebar","style","width","height","padding","backgroundColor","display","alignItems","flex","justifyContent","Page","BillingWidget","cursor","onClick","alert","BillingSection","useState","isActive","setActive","type","checked","onChange","e","target","AdminWidget","badgeCount","position","color","fontSize","fontWeight","borderRadius","top","left","AdminSection","count","setCount","step","min","parseInt","App","minHeight","flexDirection","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.ed36c772.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PluginStore from '../utils/store';\n\ntype ProviderContextType = {\n  store: PluginStore;\n};\n\nexport const ProviderContext = React.createContext<ProviderContextType>(\n  {} as ProviderContextType\n);\n\ntype PluginStoreProviderProps = ProviderContextType;\n\nconst PluginStoreProvider: React.FC<PluginStoreProviderProps> = ({\n  children,\n  store\n}) => {\n  const contextValues = useMemo(\n    () => ({\n      store\n    }),\n    [store]\n  );\n\n  return (\n    <ProviderContext.Provider value={contextValues}>\n      {children}\n    </ProviderContext.Provider>\n  );\n};\n\nexport default PluginStoreProvider;\n","import { ComponentType } from 'react';\nimport { PluginStoreType } from '../types';\n\nexport class PluginStore {\n  private sections: PluginStoreType = {};\n  private listeners: Array<(sections: PluginStoreType) => void> = [];\n\n  subscribe(listener: (sections: PluginStoreType) => void): () => void {\n    this.listeners.push(listener);\n\n    // return unsubscribe callback\n    return (): void => {\n      this.listeners = this.listeners.filter((current) => current !== listener);\n    };\n  }\n\n  registerPlugin(\n    section: string,\n    component: ComponentType | JSX.Element,\n    name: string,\n    priority = 0\n  ): void {\n    const pluginStore = this.sections[section] || [];\n\n    // if we find a component with the given name, replace it\n    if (pluginStore.findIndex((current) => current.name === name) !== -1) {\n      this.sections[section] = pluginStore.map((current) =>\n        current.name === name\n          ? {\n              component,\n              priority,\n              name\n            }\n          : current\n      );\n    } else {\n      this.sections[section] = [...pluginStore, { component, priority, name }];\n    }\n\n    this.listeners.forEach((listener) => listener(this.sections));\n  }\n\n  removePlugin(section: string, name: string): void {\n    const pluginStore = this.sections[section] || [];\n\n    this.sections[section] = pluginStore.filter(\n      (current) => current.name !== name\n    );\n\n    this.listeners.forEach((listener) => listener(this.sections));\n  }\n\n  getPluginsForSection(section: string): Array<ComponentType | JSX.Element> {\n    const pluginStore = this.sections[section];\n\n    if (!pluginStore || pluginStore.length < 1) {\n      return [];\n    }\n\n    return pluginStore\n      .sort((a, b) => a.priority - b.priority)\n      .map((a) => a.component);\n  }\n}\n\nexport default PluginStore;\n","import React from 'react';\nimport usePlugins from '../hooks/usePlugins';\n\ntype PluginsProps = {\n  section: string;\n};\n\nconst Plugins = ({ section }: PluginsProps): JSX.Element => {\n  const plugins = usePlugins(section);\n\n  return (\n    <React.Fragment>\n      {plugins.map((component, index) => (\n        <React.Fragment key={`${section}-${index}`}>{component}</React.Fragment>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default Plugins;\n","import React, { useContext, useEffect, useMemo, useReducer } from 'react';\r\nimport { ProviderContext } from '../components/PluginStoreProvider';\r\n\r\nconst usePlugins = (section: string): Array<JSX.Element> => {\r\n  const { store } = useContext(ProviderContext);\r\n  const [, forceRender] = useReducer((s) => s + 1, 0);\r\n\r\n  useEffect(() => {\r\n    const unsub = store.subscribe(() => {\r\n      forceRender();\r\n    });\r\n\r\n    return (): void => {\r\n      unsub();\r\n    };\r\n  });\r\n\r\n  const plugins = store.getPluginsForSection(section);\r\n\r\n  return useMemo(\r\n    () =>\r\n      plugins.map((component) => {\r\n        if (React.isValidElement(component)) {\r\n          return (component as unknown) as JSX.Element;\r\n        } else {\r\n          const Component = component as React.ComponentType;\r\n          return <Component />;\r\n        }\r\n      }),\r\n    [plugins]\r\n  );\r\n};\r\n\r\nexport default usePlugins;\r\n","import React from 'react';\nimport { Plugins } from 'react-plugins';\n\nconst Sidebar = () => (\n  <div\n    style={{\n      width: 'calc(100% - 30px)',\n      height: '90px',\n      padding: '10px 15px',\n      backgroundColor: '#95a5a6',\n      display: 'flex',\n      alignItems: 'center'\n    }}\n  >\n    <h1 style={{ flex: 10 }}>Logo</h1>\n    <div style={{ display: 'flex', justifyContent: 'space-around', flex: 1 }}>\n      <Plugins section='sidebar' />\n    </div>\n  </div>\n);\n\nexport default Sidebar;\n","import React from 'react';\n\nconst Page: React.FC = ({ children }) => {\n  return <div style={{ flex: 1, padding: '0 15px' }}>{children}</div>;\n};\n\nexport default Page;\n","import { PluginStore } from 'react-plugins';\n\nconst store = new PluginStore();\n\nexport default store;\n","import React from 'react';\n\nconst BillingWidget = () => (\n  <div style={{ cursor: 'pointer' }} onClick={() => alert('Billing clicked')}>\n    <b>Billing</b>\n  </div>\n);\n\nexport default BillingWidget;\n","import React, { useEffect, useState } from 'react';\nimport PluginStore from '../../../pluginStore';\nimport BillingWidget from './BillingWidget';\n\nconst BillingSection = () => {\n  const [isActive, setActive] = useState(true);\n\n  useEffect(() => {\n    if (isActive) {\n      // will appear first\n      PluginStore.registerPlugin('sidebar', BillingWidget, 'billing-widget', 0);\n    } else {\n      PluginStore.removePlugin('sidebar', 'billing-widget');\n    }\n  });\n\n  return (\n    <div style={{ width: '100%' }}>\n      <h2>Billing section</h2>\n      <label>\n        <input\n          type='checkbox'\n          checked={isActive}\n          onChange={(e) => setActive(e.target.checked)}\n        />{' '}\n        Toggle the billing module on/off\n      </label>\n    </div>\n  );\n};\n\nexport default BillingSection;\n","import React from 'react';\n\ntype AdminWidgetProps = {\n  badgeCount: number;\n};\n\nconst AdminWidget = ({ badgeCount }: AdminWidgetProps) => (\n  <div style={{ position: 'relative' }}>\n    <b>Admin</b>\n    <span\n      style={{\n        backgroundColor: 'red',\n        color: 'white',\n        width: '27px',\n        height: '25px',\n        fontSize: '11px',\n        fontWeight: 'bold',\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderRadius: '50%',\n        position: 'absolute',\n        top: '-90%',\n        left: '90%'\n      }}\n    >\n      {badgeCount > 99 ? '99+' : badgeCount}\n    </span>\n  </div>\n);\n\nexport default AdminWidget;\n","import React, { useEffect, useState } from 'react';\nimport AdminWidget from './AdminWidget';\nimport PluginStore from '../../../pluginStore';\n\nconst AdminSection = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    PluginStore.registerPlugin(\n      'sidebar',\n      <AdminWidget badgeCount={count} />,\n      'admin-widget',\n      -100\n    );\n  });\n\n  return (\n    <div style={{ width: '100%' }}>\n      <h2>Admin section</h2>\n      <p>Set number of badges in the widget</p>\n      <input\n        type='number'\n        step='1'\n        min='0'\n        value={count}\n        onChange={(e) => setCount(parseInt(e.target.value, 10) || 0)}\n      />\n    </div>\n  );\n};\n\nexport default AdminSection;\n","import React from 'react';\nimport Sidebar from './components/Sidebar';\nimport ModulesPage from './components/Page';\nimport BillingSection from './modules/billing/components/BillingSection';\nimport AdminSection from './modules/admin/components/AdminSection';\n\nconst App = () => (\n  <div\n    style={{\n      width: '100vw',\n      minHeight: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    }}\n  >\n    <Sidebar />\n    <ModulesPage>\n      <BillingSection />\n      <AdminSection />\n    </ModulesPage>\n  </div>\n);\n\nexport default App;\n","import './index.css';\n\nimport React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './pluginStore';\nimport { PluginStoreProvider } from 'react-plugins';\n\nReactDOM.render(\n  <Suspense fallback='Loading...'>\n    <PluginStoreProvider store={store}>\n      <App />\n    </PluginStoreProvider>\n  </Suspense>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}